package com.osipov.funbctions

@SuppressWarnings("kotlin:S1192")
fun main() {
    var language: String? = null
    for (i in 0..1) {
        if (i == 1) {
            language = "Kotlin"
        } else {
            println("language = $language")
        }

        language?.let {  // эта функция, которая позволяет выполнить блок кода с объектом в качестве контекста. Она часто
            // используется для работы с nullable, благодаря возможности использовать безопасный вызов
            println("Hello, $it")
        }
    }
    println("===============================================================================")
    val p1 = Person("Alice", 30)
    val message = p1.run {  // эта функция объединяет вызов метода и выполнение блока кода. Это позволяет удобно
        // работать с объектами, возвращая результат последней операции в блоке.
        "Name: $name, Age: $age"
    }
    println(message)
    println("===============================================================================")
    val p2 = Person("Bob", 25)
    with(p2) {  // эта функция позволяет вызывать несколько методов на одном объекте, не указывая имя объекта несколько
        // раз. Он не возвращает значение, а только выполняет блок кода.
        println("Name: $name")
        println("Age: $age")
    }
    println("===============================================================================")
    val p3 = Person("Charlie", 20)
        .apply {  // эта функция используется для инициализации объекта и возвращает сам объект. Это удобно для
            // настройки объектов, таких как создание и конфигурация.
            age++
        }
    println(p3)
    println("===============================================================================")
    Person("Diana", 28)
        .also {  // эта функция позволяет выполнять дополнительные операции с объектом, возвращая сам объект. Это удобно
            // для выполнения побочных эффектов, таких как логирование.
            println("Creating a person: $it")
        }
    println("-------------------------------------------------------------------------------")
    println("-------------------------------------------------------------------------------")
    println("-------------------------------------------------------------------------------")
    val car: Car? = Car("Tesla", 2021)
    car?.let { println("Car model: ${it.model}") }
    println("===============================================================================")
    val carInfo = car?.run { "Model: $model, Year: $year" }
    println(carInfo)
    println("===============================================================================")
    with(car) {
        println("Year: ${this?.year}")  // Из-за nullable требуется проверка
    }
    println("===============================================================================")
    val anotherCar = Car("BMW", 2020).apply { year++ }
    println(anotherCar)
    println("===============================================================================")
    anotherCar.also { println("Car created: $it") }
}

data class Person(
    var name: String,
    var age: Int
)

data class Car(
    var model: String,
    var year: Int
)
